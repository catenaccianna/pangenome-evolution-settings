Var random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Var pop_size = 1000;            // Number of organisms to evaluate in the population. (at least 1000 for NK)
Var num_bits = 100;             // Number of bits in each organism.

Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of next generation organisms

BitsOrg bits_org {
  output_name = "bits";         // Name of variable to contain bit sequence.
  N = 100;                       // Number of bits in organism. Here we're using 100 for the nk landscape. 
                                //Probably set this later based on input.
  mut_prob = 0.01;	           	// Probability of each bit mutating on reproduction.
};

EvalNK eval_nk {                // Evaluate bitstrings on an NK fitness lanscape.
  N = num_bits;                 // Number of bits required in output
  K = 3;                        // Number of bits used in each gene (k-mer)
  bits_trait = "bits";          // Which trait stores the bit sequence to evaluate?
  fitness_trait = "fitness";    // Which trait should we store NK fitness in?
};

SelectTournament my_selector {
  tournament_size = 2;       // Number of orgs in each tournament
  fitness_fun = "fitness";   // Which trait provides the fitness value?
};

DataFile fit_file { filename="fitness.csv"; };
fit_file.ADD_COLUMN( "Random Seed", "random_seed" );
fit_file.ADD_COLUMN( "Time Step", "ud" );
fit_file.ADD_COLUMN( "Average Fitness", "main_pop.CALC_MEAN('fitness')" );
fit_file.ADD_COLUMN( "Maximum Fitness", "main_pop.CALC_MAX('fitness')" );
fit_file.ADD_COLUMN( "Dominant Fitness", "main_pop.CALC_MODE('fitness')" );
fit_file.ADD_COLUMN( "Num Unique Genotypes", "main_pop.CALC_RICHNESS('bits')" );


@START() {
    PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
    main_pop.INJECT("bits_org", pop_size);                     // Inject starting population
};

@UPDATE(Var ud) {
    IF (ud == 1000) EXIT();

    eval_nk.EVAL(main_pop);

    fit_file.WRITE();
    PRINT("UD:", GET_UPDATE(),
        "  MainPopSize=", main_pop.SIZE(),
        "  AveFitness=", main_pop.CALC_MEAN("fitness"),
        "  Num org bits:     ", bits_org.N,
        "  Num unique genotypes:     ", main_pop.CALC_RICHNESS("bits")
       );

    my_selector.SELECT(main_pop, next_pop, pop_size);

    main_pop.REPLACE_WITH(next_pop);

};
